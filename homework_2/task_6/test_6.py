from t_6_3 import isPalindrome
import unittest


class CustomTestResult(unittest.TextTestResult):
    def startTest(self, test: unittest.TestCase) -> None:
        super().startTest(test)
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test._testMethodName} {test._testMethodDoc}")

    def addSuccess(self, test: unittest.TestCase) -> None:
        super().addSuccess(test)
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {test._testMethodName}")

    def addFailure(self, test: unittest.TestCase, err) -> None:
        super().addFailure(test, err)
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {test._testMethodName}")

    def addError(self, test: unittest.TestCase, err) -> None:
        super().addError(test, err)
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test._testMethodName}")


class CustomTestRunner(unittest.TextTestRunner):
    resultclass = CustomTestResult


class TestIsPalindrome(unittest.TestCase):
    def test_is_palindrome(self):
        """–ü—Ä–∏–º–µ—Ä —Å —Å–µ–º–∏–Ω–∞—Ä–∞"""
        s = "abcba"
        result = isPalindrome(s)
        self.assertTrue(result)

    def test_empty_string(self):
        """–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"""
        s = ""
        result = isPalindrome(s)
        self.assertTrue(result)

    def test_fail(self):
        """–°—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–ª–∏–Ω–¥—Ä–æ–º"""
        s = "asefasfgfdgs"
        result = isPalindrome(s)
        self.assertFalse(result)

    def test_one_element(self):
        """–û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç"""
        s = "a"
        result = isPalindrome(s)
        self.assertTrue(result)

    def test_two_elements(self):
        """–î–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        s = "ab"
        result = isPalindrome(s)
        self.assertFalse(result)


if __name__ == "__main__":
    runner = CustomTestRunner()
    unittest.main(testRunner=runner)
