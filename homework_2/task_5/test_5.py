from t_5_3 import isSubsequence
import unittest


class CustomTestResult(unittest.TextTestResult):
    def startTest(self, test: unittest.TestCase) -> None:
        super().startTest(test)
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test._testMethodName} {test._testMethodDoc}")

    def addSuccess(self, test: unittest.TestCase) -> None:
        super().addSuccess(test)
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {test._testMethodName}")

    def addFailure(self, test: unittest.TestCase, err) -> None:
        super().addFailure(test, err)
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {test._testMethodName}")

    def addError(self, test: unittest.TestCase, err) -> None:
        super().addError(test, err)
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test._testMethodName}")


class CustomTestRunner(unittest.TextTestRunner):
    resultclass = CustomTestResult


class TestIsSubsequence(unittest.TestCase):
    def test_is_subsequence(self):
        """–ü—Ä–∏–º–µ—Ä —Å —Å–µ–º–∏–Ω–∞—Ä–∞"""
        a = "abd"
        b = "uabqd"
        result = isSubsequence(a, b)
        self.assertTrue(result)

    def test_empty_first_string(self):
        """–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è"""
        a = ""
        b = "uabqd"
        result = isSubsequence(a, b)
        self.assertTrue(result)

    def test_fail_test(self):
        """–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–≤—É—é"""
        a = "x"
        b = "uabqd"
        result = isSubsequence(a, b)
        self.assertFalse(result)

    def test_second_shorter(self):
        """–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–≤—É—é"""
        a = "dsfssfx"
        b = "dsfss"
        result = isSubsequence(a, b)
        self.assertFalse(result)


if __name__ == "__main__":
    runner = CustomTestRunner()
    unittest.main(testRunner=runner)
