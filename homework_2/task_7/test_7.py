from t_7 import merge_sorted_lists, ListNode
import unittest


class CustomTestResult(unittest.TextTestResult):
    def startTest(self, test: unittest.TestCase) -> None:
        super().startTest(test)
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test._testMethodName} {test._testMethodDoc}")

    def addSuccess(self, test: unittest.TestCase) -> None:
        super().addSuccess(test)
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {test._testMethodName}")

    def addFailure(self, test: unittest.TestCase, err) -> None:
        super().addFailure(test, err)
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {test._testMethodName}")

    def addError(self, test: unittest.TestCase, err) -> None:
        super().addError(test, err)
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test._testMethodName}")


class CustomTestRunner(unittest.TextTestRunner):
    resultclass = CustomTestResult


class TestMergeTwoLists(unittest.TestCase):
    def test_merge_sorted_lists(self):
        """–¢–µ—Å—Ç 1: –û–±–∞ —Å–ø–∏—Å–∫–∞ –Ω–µ –ø—É—Å—Ç—ã–µ"""
        node_1_1 = ListNode(1)
        node_1_2 = ListNode(2)
        node_1_3 = ListNode(6)
        node_1_1.next = node_1_2
        node_1_2.next = node_1_3
        node_2_1 = ListNode(3)
        node_2_2 = ListNode(4)
        node_2_3 = ListNode(5)
        node_2_1.next = node_2_2
        node_2_2.next = node_2_3
        result = merge_sorted_lists(node_1_1, node_2_1)
        dummy = ListNode()
        cur = dummy
        cur.next = node_1_1
        node_1_1.next = node_1_2
        node_1_2.next = node_2_1
        node_2_1.next = node_2_2
        node_2_2.next = node_2_3
        node_2_3.next = node_1_3
        self.assertEqual(result, dummy.next)

    def test_first_list_is_empty(self):
        """–¢–µ—Å—Ç 2: –ü–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π"""
        node_1_1 = ListNode()
        node_2_1 = ListNode(1)
        node_2_2 = ListNode(2)
        node_2_3 = ListNode(3)
        result = merge_sorted_lists(node_1_1, node_2_1)
        dummy = ListNode()
        cur = dummy
        cur.next = node_1_1
        node_1_1.next = node_2_1
        node_2_1.next = node_2_2
        node_2_2.next = node_2_3
        self.assertEqual(result, dummy.next)

    def test_second_list_is_empty(self):
        """–¢–µ—Å—Ç 3: –í—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π"""
        node_2_1 = ListNode()
        node_1_1 = ListNode(1)
        node_1_2 = ListNode(2)
        node_1_3 = ListNode(3)
        result = merge_sorted_lists(node_1_1, node_2_1)
        dummy = ListNode()
        cur = dummy
        cur.next = node_2_1
        node_2_1.next = node_1_1
        node_1_1.next = node_1_2
        node_1_2.next = node_1_3
        self.assertEqual(result, dummy.next)


if __name__ == "__main__":
    runner = CustomTestRunner()
    unittest.main(testRunner=runner)
